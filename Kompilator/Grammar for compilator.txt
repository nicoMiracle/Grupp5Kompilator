program -> statementList
statementList -> statement*
statement -> (whileStatement | ifStatement | expressionStatement | declarationStatement | assignStatement | returnStatement
| blockStatement | inputStatement | outputStatement |methodDeclarationStatement)

whileStatement -> "while" "(" expression ")" blockStatement
ifStatement -> "if" "(" expression ")" blockstatement
expressionStatement -> expression ";"
declarationStatement-> (type ID ";") | type assignStatement)
assignStatement -> ID "=" expression ";"
returnStatement -> "return" expression ";"
blockStatement -> "{" statement* "}"

inputStatement -> "input.nextLine();"
outputStatement -> "System.out.println" "(" expression ")"

methodDeclarationStatement -> returnType ID "(" ParameterList ")"" blockStatement
ParameterList -> parameter*
parameter -> Type ID

expression -> term+
term -> intLiteral | ID | StringLiteral | Equals | Add |subtract

Equals -> "==" expression
Add -> "+" expression
Subtract -> ""-" expression

//keeping these in
MoreEq ->  ">=" expression
LessEq ->  "<=" expression
Less ->  "<" expression
More ->  ">" expression
NotEquals -> "!=" expression

intLiteral -> digit+
StringLiteral -> "(Any character)*"
returnType -> (type|void)
type -> (int | string)
ID -> letter (letter|digit)*
letter -> (a...z | A...Z)
digit -> 0...9

WHILE
IF
RETURN
PLUS
MINUS
LPAR
RPAR
LBRAC
RBRAC
ASSIGN -> =
EQUAL -> ==
INPUT.NEXT.LINE()
System.out.println


//recursive descent parsing
// profiler: string + or StringBuilder 
rekord for name of variable
tokens som en rekord klass